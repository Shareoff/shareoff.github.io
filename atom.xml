<?xml version="1.0" encoding="utf-8"?>


<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title type="text">Obsessed With Details</title>
    <subtitle type="html">My personal blog</subtitle>
    <updated>2020-12-21T10:11:02&#43;02:00</updated>
    <id>/</id>
    <link rel="alternate" type="text/html" href="/" />
    <link rel="self" type="application/atom&#43;xml" href="/atom.xml" />
    <author>
            <name>Sharon Hadas</name>
            <uri>/</uri>
            
                <email>sharonhadas7@gmail.com</email>
            </author>
    
    <generator uri="https://gohugo.io/" version="0.79.0">Hugo</generator>
        <entry>
            <title type="text">What is D (Dlang)?</title>
            <link rel="alternate" type="text/html" href="/posts/what-is-d/" />
            <id>/posts/what-is-d/</id>
            <updated>2020-12-21T08:33:45&#43;02:00</updated>
            <published>2020-12-16T09:25:11&#43;02:00</published>
            
            <summary type="html">It&#39;s just like C, except it&#39;s D. Well, kind of...</summary>
            
                <content type="html">&lt;p&gt;Hello and thanks for joining me for my first blog post!
As mentioned in my &lt;a href=&#34;/about&#34;&gt;about&lt;/a&gt; page, my main passion at the moment and what I do for a living is &lt;strong&gt;learning D&lt;/strong&gt; and programming in it. Since it&amp;rsquo;s not one of the bigger, more famous programming languages, I figure it could be helpful to explain a little what is D, from &lt;strong&gt;my POV as a C++ developer&lt;/strong&gt;, to those of you who may not be familiar.&lt;/p&gt;
&lt;h2 id=&#34;what-is-d&#34;&gt;What is D?&lt;/h2&gt;
&lt;p&gt;From the official site of &lt;a href=&#34;https://dlang.org/&#34;&gt;dlang&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;D is a general-purpose programming language with static typing, systems-level access, and C-like syntax. With the D Programming Language, write fast, read fast, and run fast.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;From &lt;a href=&#34;https://en.wikipedia.org/wiki/D_(programming_language)&#34;&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Though it originated as a re-engineering of C++, D is a distinct language. It has redesigned some core C++ features, while also sharing characteristics of other languages, notably Java, Python, Ruby, C#, and Eiffel.&lt;/p&gt;
&lt;p&gt;The design goals of the language attempted to combine the performance and safety of compiled languages with the expressive power of modern dynamic languages. Idiomatic D code is commonly as fast as equivalent C++ code, while also being shorter. The language as a whole is not memory-safe but does include optional attributes designed to check memory safety.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This means that generally you would use D in applications where you might consider using a language like C or C++. It is much more similar in richness and complexity to C++ than C, so this immediately begs the following question:&lt;/p&gt;
&lt;h2 id=&#34;why-use-d-over-c&#34;&gt;Why use D (Over C++)?&lt;/h2&gt;
&lt;p&gt;D was clearly designed to be &amp;ldquo;a &lt;strong&gt;better C++&lt;/strong&gt;&amp;rdquo;, and it shows. As a result it has &lt;strong&gt;many advantages&lt;/strong&gt; over C++:&lt;/p&gt;
&lt;h3 id=&#34;modern-language-features&#34;&gt;Modern Language Features&lt;/h3&gt;
&lt;p&gt;D feels, for the most part, much more like a modern language than C++(17) does. This is because of its built in, immediate and convenient support for many features that have become commonplace in other languages:&lt;/p&gt;
&lt;h4 id=&#34;garbage-collection&#34;&gt;Garbage Collection&lt;/h4&gt;
&lt;p&gt;Coming from C++ (which of course does not have garbage collection and prides itself on manual memory management), using GC (aka Garbage Collection) feels strange. Will my performance take a serious hit? And I&amp;rsquo;ve spent all this time learning how to manage memory correctly, is it all going to waste?&lt;/p&gt;
&lt;p&gt;The answer, I find, is actually pretty interesting:&lt;/p&gt;
&lt;p&gt;First, the GC is &lt;strong&gt;optional&lt;/strong&gt;, so you may choose not to use it. At weka.io, for example, we disable it for our performance critical section, since speed is a very high priority for us.&lt;/p&gt;
&lt;p&gt;Second, surprisingly enough, in some cases using GC can be &lt;em&gt;faster&lt;/em&gt;! How?
Well, because of &lt;strong&gt;exceptions&lt;/strong&gt; and how they are implemented. In C++, it is most correct to deallocate in destructors, which occur when we leave the scope. However, when an exception pops up, we generally need a new and different stack frame, which forces the language to have some special mechanism for holding the old stack frame and calling the destructors of all objects stored on it. So in this case and especially if we use try &amp;amp; catch statements frequently, it may actually be faster to use GC which does not need to be concerned with such things and works normally.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;/posts/what-is-d/#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Third, memory management is at least somewhat &lt;strong&gt;hard&lt;/strong&gt;, &lt;strong&gt;frustrating&lt;/strong&gt; and &lt;strong&gt;bug prone&lt;/strong&gt; even if you&amp;rsquo;re an expert.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;/posts/what-is-d/#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; Developer time spent thinking about memory management, testing for leaks and fixing memory management related bugs is a very valuable resource. If you could, wouldn&amp;rsquo;t you rather spend this time on actually working on your core product instead of racking your brain to figure out whether your code could possibly leak?&lt;/p&gt;
&lt;h4 id=&#34;syntax-sugar&#34;&gt;Syntax Sugar&lt;/h4&gt;
&lt;p&gt;If you&amp;rsquo;re not familiar with the term syntax sugar (or syntactic sugar), here&amp;rsquo;s an excerpt I lifted from wikipedia that explains this pretty well:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In computer science, syntactic sugar is syntax within a programming language that is designed to make things easier to read or to express. It makes the language &amp;ldquo;sweeter&amp;rdquo; for human use: things can be expressed more clearly, more concisely, or in an alternative style that some may prefer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Because C++ is backwards compatible with C, and how we use the language changed so much since C was created, many basic language features have inconvenient syntax.&lt;/p&gt;
&lt;p&gt;The simplest example I can think of is &lt;strong&gt;pointers&lt;/strong&gt;, because pointer dereferencing syntax is just annoying and inconvenient to write. Yes, C++ introduced a &amp;ldquo;solution&amp;rdquo; in references, but in reality we still use pointers a &lt;strong&gt;ton&lt;/strong&gt; even in modern C++ and have to deal with pointer dereferencing syntax.&lt;/p&gt;
&lt;p&gt;In D, you can usually treat pointers as if they&amp;rsquo;re already dereferenced, so you can for example access data members normally. Hurray! (Just make sure to check null - they&amp;rsquo;re still pointers!)&lt;/p&gt;
&lt;p&gt;Now, you may say, &amp;ldquo;this doesn&amp;rsquo;t sound like a very big deal, why should I care?&amp;rdquo; and the answer is, well, I agree it&amp;rsquo;s not a big deal, but it is &lt;em&gt;nice&lt;/em&gt;, and as a life philosophy, I believe we deserve to enjoy nice things ðŸ˜‰ there are quite a few other small examples like this, and bottom line, it adds up to how enjoyable the code is to write and read.&lt;/p&gt;
&lt;h4 id=&#34;nested-functions&#34;&gt;Nested Functions&lt;/h4&gt;
&lt;p&gt;In D you can define structs, classes and functions inside functions, like in Python. In languages such as C++ and Java you can achieve this by using lambdas (which are also available in D).&lt;/p&gt;
&lt;p&gt;This could be considered syntax sugar, but in my opinion it has meaningful enough benefits that it&amp;rsquo;s worth talking about on its own:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It allows us to get the benefits of &lt;strong&gt;encapsulation&lt;/strong&gt;, without using classes which feel a little&amp;hellip; &lt;strong&gt;cumbersome&lt;/strong&gt;, or like hitting a zipper with a hammer (in this case at least), because often we would like to separate a function into smaller chunks but we know it&amp;rsquo;s unlikely we are going to reuse this smaller code, only for readability, and we would like it to be clear that those code segments are only used inside this function.&lt;/li&gt;
&lt;li&gt;It lets us use lambdas only when they are truly the &lt;strong&gt;most convenient&lt;/strong&gt; solution, because we have &lt;strong&gt;another&lt;/strong&gt; convenient option.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;contract-programming-aka-design-by-contract&#34;&gt;Contract Programming (AKA Design By Contract)&lt;/h4&gt;
&lt;p&gt;Are you familiar with the concept of &lt;strong&gt;&amp;ldquo;design by contract&amp;rdquo;?&lt;/strong&gt; I was not until I started learning D, and it&amp;rsquo;s pretty cool! The idea is this - functions usually represent a &amp;ldquo;contract&amp;rdquo;. You give me this, I&amp;rsquo;ll return that, and both clauses of the contract should not be violated. Often, programmers choose to document this information. Which is fine, except we&amp;rsquo;d rather the code be self documenting and get the point across by itself.&lt;/p&gt;
&lt;p&gt;The solution is simple - code blocks &lt;em&gt;built into the language&lt;/em&gt; that allow us to specify &amp;ldquo;contracts&amp;rdquo;, which are actually assertions, when entering and leaving the function. It looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-D&#34; data-lang=&#34;D&#34;&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;var should be positive!&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;out&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;If this function did not return true something bad happened&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// actual code here...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This way, we can write &lt;strong&gt;self documenting code&lt;/strong&gt; that explains exactly &lt;strong&gt;how&lt;/strong&gt; you are and aren&amp;rsquo;t supposed to use it! I think that&amp;rsquo;s neat.&lt;/p&gt;
&lt;p&gt;To be perfectly fair, I haven&amp;rsquo;t used it so far and it does not seem that many people use it, but I think it is a worthwhile approach to consider and try to use. I like to think of it as a &lt;strong&gt;more practical alternative to TDD&lt;/strong&gt; (Test Driven Development).&lt;/p&gt;
&lt;p&gt;What do you think of D so far? &lt;strong&gt;not bad&lt;/strong&gt;, right? But it&amp;rsquo;s likely you&amp;rsquo;re not falling off your seat. That&amp;rsquo;s okay, because now we&amp;rsquo;re getting to the real meat of things:&lt;/p&gt;
&lt;h3 id=&#34;compile-time-programming-features&#34;&gt;Compile Time Programming Features&lt;/h3&gt;
&lt;p&gt;This is the real selling point of D, and it allows you to do all sorts of amazing things.&lt;/p&gt;
&lt;h4 id=&#34;what-c-offers&#34;&gt;What C++ Offers&lt;/h4&gt;
&lt;p&gt;Can we run code in compile time in C++? Yes, and a fun piece of trivia many know is that &lt;strong&gt;C++ templates are Turing complete&lt;/strong&gt;, which is kind of cool, but to those of us who have tried to use some of those alleged Turing-complete capabilities, it&amp;rsquo;s also incredibly &lt;strong&gt;horrifying&lt;/strong&gt;: when you try to implement anything but the most basic functionality with templates in C++, &lt;strong&gt;things get ugly, FAST&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The syntax is horrible and it constantly feels like you&amp;rsquo;re wrestling the language to get it to do what you want. You have to know some pretty obscure language rules really well, which are never relevant otherwise and are often not intuitive. Add to that the lack of debug tools in compile time with horrendous compilation errors, and the result is that trying to develop complicated features in compile time becomes &lt;strong&gt;highly impractical&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why should you care?&lt;/strong&gt; Well, for one example, this means that in some cases we opt to generate C++ code with a scripting language, which works, but has all sorts of maintainability issues and almost always ends up being a huge pile of technical debt.&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;/posts/what-is-d/#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;In C++17 and C++20, we got a whole bunch of functionality to aid in compile time programming (&lt;code&gt;if&lt;/code&gt; statements at compile time, a more convenient syntax for placing limitations on template types, etc). Even still, template meta-programming remains an extremely daunting task.&lt;/p&gt;
&lt;p&gt;The bottom line is that originally template meta-programming was not intentionally created, for the most part, by the C++ committee, but rather created &lt;strong&gt;accidentally&lt;/strong&gt; and discovered through research of the language. To make these features convenient to use, the whole thing &lt;strong&gt;needs a redesign&lt;/strong&gt;. Unfortunately, C++ has to be backwards compatible to older C++ and even to C so such a redesign is impossible.&lt;/p&gt;
&lt;h4 id=&#34;enter-d&#34;&gt;Enter D.&lt;/h4&gt;
&lt;p&gt;One of D&amp;rsquo;s main missions was to improve &lt;strong&gt;this&lt;/strong&gt;, specifically. In fact, one of the founders of the D programming language, &lt;a href=&#34;https://erdani.com/index.php/about/&#34;&gt;Andrei Alexandrescu&lt;/a&gt;, wrote one of the best C++ books on template meta-programming (he kind of popularized the concept, really), Modern C++ Design. This book gets pretty dense and hard to implement (remember? These were not really intentional language features, but kind of an abuse of the language), so he implemented some of its conclusions himself into a library called Loki. So basically, what I&amp;rsquo;m trying to say here is this guy knows his shit.&lt;/p&gt;
&lt;p&gt;Alexandrescu has been involved in the development of D from pretty early on, and together with the other creators of the language, they made sure it was made &lt;strong&gt;from the get-go&lt;/strong&gt; to solve many of the problems C++ compile time programmers ran into. D has a multitude of additional features that make your code so much better if you are trying to write compile-time code and some of these features even &lt;strong&gt;ended up finding their way back to C++&lt;/strong&gt; (but of course, not all of them - if that were possible, we wouldn&amp;rsquo;t need another language).&lt;/p&gt;
&lt;p&gt;To fully explain all the amazing features that are involved to make D compile time so great this post would have to be at least twice as long, and it&amp;rsquo;s already getting wordy (whew!). But in addition to C++-like templates with much of their original power and type deduction in the form of &lt;code&gt;auto&lt;/code&gt;, D added &lt;code&gt;traits&lt;/code&gt;, &lt;code&gt;mixin&lt;/code&gt;, and &lt;code&gt;User Defined Attributes (UDA)&lt;/code&gt;, each of which add an insane amount of power to the language!&lt;/p&gt;
&lt;p&gt;This makes it so your D project is much more &lt;strong&gt;self contained&lt;/strong&gt;, because many things for which you would need to write tools in a scripting language, like code generation and compile-time checks, can be done &lt;strong&gt;inside your main code base&lt;/strong&gt;, relatively conveniently and easily! D is a &lt;strong&gt;very easy choice&lt;/strong&gt;&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;/posts/what-is-d/#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; if you want a language that solves this problem well, it is really that good.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re anything like me, here comes the part where you go, &amp;ldquo;Well, that sounds great. D is basically the perfect C++ replacement. So why isn&amp;rsquo;t the entire world using D?&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;why-i-think-d-has-not-replaced-c&#34;&gt;Why (I think) D has not replaced C++&lt;/h2&gt;
&lt;p&gt;The truth is, D is &lt;a href=&#34;https://dlang.org/orgs-using-d.html&#34;&gt;not very popular&lt;/a&gt;. I can&amp;rsquo;t be sure what, exactly, is the combination of limitations that made so many developers not choose to move to D. But there are a few things that cannot be ignored and are worth mentioning.&lt;/p&gt;
&lt;h3 id=&#34;imperfect-c-integration&#34;&gt;Imperfect C++ Integration&lt;/h3&gt;
&lt;p&gt;It is rare projects are completely written from scratch, and often projects already have a respectable existing code base in C++. &lt;strong&gt;The good news&lt;/strong&gt; is that D&amp;rsquo;s C++ integration is actually some of the best on the market - most languages only natively support interfacing with C, and then you have to go through some hoops to integrate your C++ code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The bad news&lt;/strong&gt; is that it has some limitations, it requires a bit of work and often ends up being impractical for larger projects or libraries. This in itself is somewhat of a problem, but really it only serves to make the next problem even more severe:&lt;/p&gt;
&lt;h3 id=&#34;small-community-no-libraries&#34;&gt;Small Community, No Libraries&lt;/h3&gt;
&lt;p&gt;This kind of cycle is very hard to break out of - D does not have the external library support that a language such as C++ has, because it&amp;rsquo;s smaller, and since you don&amp;rsquo;t integrate flawlessly with C++ it&amp;rsquo;s not always worth the effort to try and use a C++ library. So many developers choose the language which has more external libraries, which leads to less libraries being developed, which leads to less developers choosing D, etc.&lt;/p&gt;
&lt;p&gt;Unfortunately, when writing D, other than the standard library, the &lt;strong&gt;ecosystem is a bit thin&lt;/strong&gt; and you don&amp;rsquo;t end up relying on external libraries very often. For the most part, that&amp;rsquo;s a bad thing, because you end up doing a lot of extra work.&lt;/p&gt;
&lt;p&gt;But there&amp;rsquo;s another factor, kind of &amp;ldquo;random&amp;rdquo; maybe, or perhaps a twist of fate, but unfortunately for the D language,&lt;/p&gt;
&lt;h3 id=&#34;rust-exists&#34;&gt;Rust Exists&lt;/h3&gt;
&lt;p&gt;The Rust programming language is a pretty new language; it was developed after D, and it aims to fill a similar niche: &amp;ldquo;C++, but better&amp;rdquo;. And while Rust does not quite have the compile time capabilities of D, it has a different focus, not any less important: security. While D is somewhat more secure and less error prone than C++, Rust is leaps and bounds ahead of both of them.&lt;/p&gt;
&lt;p&gt;Regardless of which approach or language is better, which is a debate I do not feel qualified to participate in, Rust emerged in a perfect storm of coming into a world where &lt;strong&gt;&amp;ldquo;security&amp;rdquo; is one of the biggest buzzwords floating around&lt;/strong&gt; (while &amp;ldquo;template metaprogramming&amp;rdquo; was not the theme of the 2010s for most of the programming world ðŸ˜œ), and it rose to answer this need of the industry well. As a result, in many cases where a company might choose D, they ended up choosing this newer and somewhat shinier option.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;h3 id=&#34;tldr&#34;&gt;TL;DR&lt;/h3&gt;
&lt;p&gt;D is a really cool language that improves on C++ in almost every way imaginable. However it has not fully taken off and it looks kind of unlikely it will. Its compile time programming features are particularly noteworthy, making it possibly the best language for writing compile time code&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;/posts/what-is-d/#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;. It allows you to write &lt;strong&gt;beautiful code&lt;/strong&gt;, which is what we all want, while having C++-like performance.&lt;/p&gt;
&lt;h3 id=&#34;personal-note&#34;&gt;Personal Note&lt;/h3&gt;
&lt;p&gt;I am personally really enjoying learning D - it is a language with a lot of depth which is very enjoyable for me, but for the most part it is &lt;strong&gt;relatively easy&lt;/strong&gt; and &lt;strong&gt;intuitive to learn&lt;/strong&gt; as a C++ developer. And seeing the ways its compile time capabilities are used in our code base at my company &lt;a href=&#34;https://weka.io&#34;&gt;weka.io&lt;/a&gt; and in most D code bases is mind blowing and extremely satisfying. Either way, it is going to be a major part of my life for a while, so I hope you&amp;rsquo;ll join me here while I explore the intricacies of D!&lt;/p&gt;
&lt;h3 id=&#34;further-reading&#34;&gt;Further Reading&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;re interested and would like to read (or hear) more, here are some resources I can personally recommend:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://dlang.org/&#34;&gt;https://dlang.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The D official website, which includes a good amount of learning resources and documentation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://ddili.org/ders/d.en/index.html&#34;&gt;http://ddili.org/ders/d.en/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;An online book called Programming In D which teaches D from scratch&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://wiki.dlang.org/The_D_Programming_Language&#34;&gt;https://wiki.dlang.org/The_D_Programming_Language&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The D wiki&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/channel/UC5DNdmeE-_lS6VhCVydkVvQ&#34;&gt;https://www.youtube.com/channel/UC5DNdmeE-_lS6VhCVydkVvQ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The official youtube channel of the D language, has lectures from DConf (the annual D conference)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Of course, frequent use of exceptions and try/catch statements is not recommended for performance critical code. In these cases, it is unlikely GC will match manual memory management for performance. &lt;a href=&#34;/posts/what-is-d/#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Don&amp;rsquo;t believe me? Watch &lt;a href=&#34;https://www.youtube.com/watch?v=hEx5DNLWGgA&#34;&gt;this excellent lecture by Herb Sutter&lt;/a&gt;, who is a well respected figure in the C++ community - he&amp;rsquo;s particularly famous for writing great books such as the Exceptional C++ series. In short, he provides many solutions for what he calls &amp;ldquo;by default&amp;rdquo; memory management - simply using the correct memory managing types and relying on destructors to write sound code which will not leak.&lt;/p&gt;
&lt;p&gt;This in itself requires you to have a decent amount of C++ knowledge to correctly implement, but then comes the kicker - he presents a case, not very theoretical or far-fetched, for which there is currently &lt;strong&gt;no good solution&lt;/strong&gt; in C++! And then comes up with a solution himself, which is actually incredibly dense and complicated. As far as I know, there is no easy method or agreed upon consensus on how to solve this problem to this day. &lt;a href=&#34;/posts/what-is-d/#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Speaking from my personal experience here so of course I could be wrong. If you know of python that generates C++ as a small part of a larger C++ project that is easy to maintain and convenient to use let me know and I will gladly correct myself. Unfortunately, I&amp;rsquo;ve seen multiple code generating systems designed from scratch and have been involved in a few of them and the costs of having something like that in your project are almost always higher than you might think. &lt;a href=&#34;/posts/what-is-d/#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Lisp is the other language that I hear has very strong compile time capabilities, perhaps more so than D. Still, D beats out practically every other language on this front, which makes it an excellent option. &lt;a href=&#34;/posts/what-is-d/#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="/tags/d/" term="D" label="D" />
                            
                        
                    
                
            
        </entry>
    
</feed>
